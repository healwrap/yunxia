name: Deploy

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Build and push Client
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/client/Dockerfile
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/pepedd/yunxia:client-latest
          build-args: |
            VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
            VITE_API_URL=/api

      - name: Build and push Server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/pepedd/yunxia:server-latest

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: 'docker-compose.yml'
          target: '/opt/yunxia'

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/yunxia

            # 创建必要的目录
            mkdir -p /opt/yunxia/uploads/temp /opt/yunxia/uploads/users /opt/yunxia/logs

            # 确保目录权限正确
            chmod -R 777 /opt/yunxia/uploads /opt/yunxia/logs

            # 设置环境变量
            echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" > .env
            echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" >> .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env

            # 登录阿里云容器服务
            docker login --username=${{ secrets.ALIYUN_USERNAME }} registry.cn-hangzhou.aliyuncs.com --password=${{ secrets.ALIYUN_PASSWORD }}

            # 停止当前运行的服务
            docker-compose down

            # 拉取最新镜像
            docker-compose pull

            # 启动服务
            docker-compose up -d

            # 只清理 yunxia 项目相关的资源
            echo "清理 yunxia 项目的旧镜像..."
            docker images | grep "pepedd/yunxia" | grep -v "latest" | awk '{print $3}' | xargs -r docker rmi || true

            # 只清理悬空镜像（安全）
            docker image prune -f
